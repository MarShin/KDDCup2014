# IPython log file

import csv
import numpy as np
import pandas as pd
get_ipython().magic('logstart textclassification_log')
projects = pd.read_csv('../COMP4332_Dataset/projects.csv')
essays = pd.read_csv('../COMP4332_Dataset/essays.csv')
projects = projects.sort_values('projectid')
essays = essays.sort_values('projectid')
dates = np.array(projects.date_posted)
train_idx = np.where(dates < '2014-01-01')[0]
test_idx = np.where(dates >= '2014-01-01')[0]
totalCount = essays.shape[0]
for i in range(projects.shape[1]):
    nullcount = projects[projects[projects.columns[i]].isnull()].shape[0]
    percentage = float(nullcount) / float(totalcount)*100
    if(percentage>0):
        print(projects.columns[i],percentage,'%')
        
for i in range(projects.shape[1]):
    nullcount = projects[projects[projects.columns[i]].isnull()].shape[0]
    percentage = float(nullcount) / float(totalcount)*100
    if(percentage>0):
        print(projects.columns[i],percentage,'%')
        
for i in range(projects.shape[1]):
    nullcount = projects[projects[projects.columns[i]].isnull()].shape[0]
    percentage = float(nullcount) / float(totalCount)*100
    if(percentage>0):
        print(projects.columns[i],percentage,'%')
        
for i in range(essays.shape[1]):
    nullcount = essays[essays[essays.columns[i]].isnull()].shape[0]
    percentage = float(nullcount) / float(totalCount)*100
    if(percentage>0):
        print(essays.columns[i],percentage,'%')
        
essays = essays.fillna(value='null')
for i in range(essays.shape[1]):
    nullcount = essays[essays[essays.columns[i]].isnull()].shape[0]
    percentage = float(nullcount) / float(totalCount)*100
    if(percentage>0):
        print(essays.columns[i],percentage,'%')
        
print(essays.head())
print(essays.head(30))
print(essays.tail(30))
print(essays.tail(50))
print(essays.loc[50:100])
print(essays.loc[100])
print(essays.loc[101])
essays[50:100]
essays[100:150]
essays[150:300]
essays[4000]
essays.loc[4000]
count_vectorizer = CountVectorizer()
from sklearn.feature_extraction.text import CountVectorizer
count_vectorizer = CountVectorizer()
counts = count_vectorizer.fit_transform(essays['short_description'].values)
essays.loc[619325]
essays.loc[619326]
projects.loc[619326]
print(counts)
projects.sort_values('date_posted')
train = projects.loc[train_idx]
print (train.head())
train = essays.loc[train_idx]
print (train.shape)
test = essays.loc[test_idx]
print(test.shape)
print (train['projectid'].head())
print (outcome['projectid'].head())
print (outcomes['projectid'].head())
outcomes = pd.read_csv('../COMP4332_Dataset/outcomes.csv')
outcomes = outcomes.sort_values('projectid')
print (outcomes['projectid'].head())
print (train['projectid'].head())
train = train.sort_values('projectid')
print (train['projectid'].head())
print (outcomes.columns)
train[0]
train.loc[0]
outcomes.loc[0]
outcomes.loc[619325]
train.loc[619325]
train.head()
outcomes.head()
train.loc[664097]
train = projects_data[train_idx]
train = projects[train_idx]
print(train.shape)
print(outcomes.shape)
labels
print(train['projectid'].head())
print(outcomes['projectid'].head())
train.to_csv('test.csv',index=False)
print(test.shape)
test.to_csv('essays_test_real.csv',index=False)
readtrain = pd.read_csv('./test.csv')
readtrain = pd.read_csv('./essays_test_real.csv')
readtrain = pd.read_csv('./essays_test_real.csv')
projects.head()
temp = pd.read_csv('./projects_test.csv')
temp.shape
temp = pd.read_csv('./projects_train.csv')
temp.shape
train.shape
test.shape
train=train.replace("\n","")
train.head()
train.to_csv('essays_train.csv', encode='utf-8', index=False)
train=train.replace("\n","")
test=test.replace("\n","")
test.to_csv('essays_test.csv', encode='utf-8', index=False)
test=test.replace("\n","")
test.to_csv('essays_test.csv', encode='utf-8', index=False)
test=test.str.replace('n', '')
